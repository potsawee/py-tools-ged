"""
To replace UNK tokens generated by the seq2seq model by various methods as follow:
    1. corresponding words in the original sequence using Levenshtein distance alignment
"""

import sys
seq2seq_repo = '/home/alta/BLTSpeaking/ged-pm574/local/seq2seq/utils'
sys.path.insert(0, seq2seq_repo)

from levenshtein_align import levenshtein_align

def align(ref_sent, hyp_sent):
    # method 1
    a = ref_sent.split()
    b = hyp_sent.split()

    aout, bout = levenshtein_align(a,b)

    count = {'good': 0, 'sub': 0, 'ins': 0, 'del': 0}

    for a, b in zip(aout, bout):
        if a == b:
            deletion = False
            label = 'c'
            count['good'] += 1
        elif '*' in b:
            deletion = True
            label = 'i'
            count['del'] += 1
        else:
            deletion = False
            label = 'i'
            if '*' in a:
                count['ins'] += 1
            else:
                count['sub'] += 1

        if not deletion:
            print("{}\t{}\t{}".format(b, a, label))

    return count

def alignment_files(ref_file, hyp_file, align_method):
    with open(ref_file, 'r') as file:
        ref_sentences = file.readlines()
    with open(hyp_file, 'r') as file:
        hyp_sentences = file.readlines()

    if len(ref_sentences) != len(hyp_sentences):
        raise Exception('num sentences not match')

    total_count = {'good': 0, 'sub': 0, 'ins': 0, 'del': 0}

    for s1, s2 in zip(ref_sentences, hyp_sentences):
        s1 = s1.strip()
        s2 = s2.strip()

        count = align_method(s1,s2)
        print()

        total_count['good'] += count['good']
        total_count['sub'] += count['sub']
        total_count['ins'] += count['ins']
        total_count['del'] += count['del']

    print("good =", total_count['good'])
    print("sub =", total_count['sub'])
    print("ins =", total_count['ins'])
    print("del =", total_count['del'])

def main():
    if(len(sys.argv) != 3):
        print('Usage: python3 alignment.py original corrupted')
        return
    original = sys.argv[1]
    corrupted = sys.argv[2]

    alignment_files(original, corrupted, align)

if __name__ == '__main__':
    main()
